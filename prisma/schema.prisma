datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String?
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  purchases     Purchase[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? 
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Product {
  id        String           @id @default(cuid())
  name      String
  price     Int
  desc      String
  image     String
  purchases PurchaseProduct[] // Fix: Relation with PurchaseProduct
}

model Purchase {
  id         String          @id @default(cuid())
  userId     String          @map("user_id")
  totalPrice Int?
  createdAt  DateTime        @default(now())
  products   PurchaseProduct[]
  user       User            @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PurchaseProduct {
  id         String    @id @default(cuid())
  purchaseId String
  productId  String
  quantity   Int       @default(1)

  purchase   Purchase  @relation(fields: [purchaseId], references: [id], onDelete: Cascade)
  product    Product   @relation(fields: [productId], references: [id], onDelete: Cascade) // Fix: Add backrelation with Product
}
